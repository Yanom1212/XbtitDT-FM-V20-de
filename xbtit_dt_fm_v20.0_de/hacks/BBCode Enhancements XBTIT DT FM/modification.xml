
<hack>
  <title>BBCode Enhancements</title>
  <author>King Cobra</author>
  <version>DT FM</version>
  <file>
    <name>"$DEFAULT_ROOT/include/class.bbcode.php"</name>
    <operation>
      <search><![CDATA[/* * * * * * * * * * * * * * * * * * * *
* BB Code parser by James Wilson
* Copyright (c) 2007, James Wilson, drakewilson@gmail.com
* Released under GPL, http://www.gnu.org/copyleft/gpl.html
* Site: http://nothingoutoftheordinary.com/scripts/bbcode/
* Example: http://examples.nothingoutoftherordinary.com/bbcode/
* 
* Usage:
* In the files you want to use this, place this code:
* include("bbcode.php");
* Assuming this file is in the same directory
* 
* To parse content, call the function bbcode, like
* bbcode($post)
* Or in an echo statement
* echo bbcode($post);
* 
* Simple as that.
* 
* Valid codes:
* [url=uri]text[/url]
* [url]uri[/url]
* http://site -> link
* [img]imageuri[/img]
* [email]emailaddress[/email]
* [b]text[/b]
* [i]text[/i]
* [u]text[/u]
* [quote]text[/quote]
* [quote=author]text[/quote]
* [color=color]text[/color]
* [color=######]text[/color]
* [size=#]text[/size]
* [list][*]1[*]2[*]3[/list]
* [list=1|a]*]1[*]2[*]3[/list]
* 
* 
* Also included, function dehtml which allows nonparsed content to be outputted out to page safely
* Just call:
* dehtml($post)
* Used for things like textareas:
* echo "<textarea>".dehtml($post)."</textarea>";
* * * * * * * * * * * * * * * * * * * */

$img_count=0;
// 3 functions for the bbcode. Have to be declared outside the function to be able to call bbcode more than once.
function dosize($matches) {
  return '<span style="font-size: '.(50*$matches[1]).'%">'.$matches[2].'</span>';
}

function noparsed($matches) {
  return str_replace(array('[',']','://'), array('&#91;','&#93;','&#58;&#47;&#47;'),$matches[1]);
}

function formatlist($matches) {
  if ($matches[2]=='') {
    $end='</ul>';
    $content.='<ul>';
  } elseif(is_numeric($matches[2])) {
    $end='</ol>';
    $content.='<ol type="1">';
  } else {
    $end='</ol>';
    $content.='<ol type="a">';
  }

  return $content.str_replace('[*]',"\n".'<li>',$matches[3]).$end;
}

function parseimage($matches) {
  global $img_count;

  $img_count++;
  return "\n<div id=\"img{$img_count}\" style=\"font-size:x-small; display:inline;\">\n<img name=\"img{$img_count}\" onload='resize(this);' src='$matches[1]' border='0' alt='' /></div>";
}

function bbcode($content) {
  // Fix & to be &amp; unless it's already &amp; or a special character like  &#9600;  or some regualr ones like <,>,",(c), . More can be found here: http://www.utexas.edu/learn/html/spchar.html  But they can use the decimal verisons if the want those
  $content=preg_replace('/&(?!(amp|[#0-9]+|lt|gt|quot|copy|nbsp);)/ix','&amp;',$content);

  // But some special chars are bad, at least according to vB, so strip them. Most are just blank characters used to bypass filters, except for &#8238; which is just awesome!
  $content=str_replace(array('&#160;','&#173;','&#8205;','&#8204;','&#8237;','&#8238;'),'',$content);

  // Change new lines to <br />. nl2br function probably would work also. It's probably the same as this though. And gets rid of htmlchars. htmlentities screws up the &amp; stuff.
  $content=str_replace(array('<','>','\'','"',"\r\n","\r","\n"),array('&lt;','&gt;','&#39;','&quot;','<br />','<br />','<br />'),$content);

  // No parse. Just replace [, ], and :// to their HTML equivalents
  $content=preg_replace_callback('/\[noparse\](.+?)\[\/noparse\]/i','noparsed',$content);

  // [url=uri]text[/url]
  $content=preg_replace('(\[(URL|url)\=((http|ftp|https):\/\/[a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\](.+?)\[\/(URL|url)\])', '<a href="$2">$4</a>', $content);
  // For people too lazy to put http:// on the uri. /Shouldn't/ be XSSable
  $content=preg_replace('(\[(URL|url)\=([a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\](.+?)\[\/(URL|url)\])', '<a href="http://$2">$3</a>', $content);

   // [url]uri[/url]
  $content=preg_replace('(\[url\]((http|ftp|https):\/\/([a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*))\[\/url\])','<a href="$2&#58;&#47;&#47;$3" target="_top">$2&#58;&#47;&#47;$3</a>',$content);

  // lazy http:// people...
  $content=preg_replace('(\[url\]([a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\[\/url\])','<a href="http&#58;&#47;&#47;$1">http&#58;&#47;&#47;$1</a>',$content);

  // Images. They have to have http://. src attributes are XSSable in IE 6.0, Netscape, and Opera. http://ha.ckers.org/xss.html. Even though it's hard to do without () or \, best not to mess around with it.

  $content=preg_replace_callback('/\[img\]((http|ftp|https):\/\/([a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*))\[\/img\]/i','parseimage',$content);
  $content=preg_replace_callback('/\[img=((http|ftp|https):\/\/([a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*))\]/i','parseimage',$content);

  // http://www.google.com -> <a href="http://www.google.com">http://www.google.com</a>
  $content=preg_replace('/(?<![href|src]=)(["|\']http|ftp|https):\/\/([^(|\s|=|\]|\[|\<|\>)]*["|\'])/i','<a href="$1://$2">$1://$2</a>',$content);

  // Email. Do people even use this?
  $content=preg_replace('(\[email\]([a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]+)@([a-zA-Z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]+)\[\/email\])','<a href="mailto:$1@$2">$1@$2</a>',$content);

  // bold, italics, underline
  while (preg_match('/\[b\](.+?)\[\/b\]/i',$content))
    $content=preg_replace('/\[b\](.+?)\[\/b\]/i','<b>$1</b>',$content);
  while (preg_match('/\[i\](.+?)\[\/i\]/i',$content))
    $content=preg_replace('/\[i\](.+?)\[\/i\]/i','<i>$1</i>',$content);
  while (preg_match('/\[u\](.+?)\[\/u\]/i',$content))
    $content=preg_replace('/\[u\](.+?)\[\/u\]/i','<font style="text-decoration: underline;">$1</font>',$content);

  // font color. Word type, like [color=red]RED[/color]
  while (preg_match('/\[color=([a-z]+)\](.+?)\[\/color\]/i',$content))
    $content=preg_replace('/\[color=([a-z]+)\](.+?)\[\/color\]/i','<font color="$1">$2</font>',$content);
  // Number type, like [color=696969]GREY[/color]
  while (preg_match('/\[color=([0-9]{3,6})\](.+?)\[\/color\]/i',$content))
    $content=preg_replace('/\[color=([0-9]{3,6})\](.+?)\[\/color\]/i','<span style="color: #$1;">$2</span>',$content);

  // code
  while (preg_match('/\[code\](.+?)\[\/code\]/i',$content))
    $content=preg_replace('/\[code\](.+?)\[\/code\]/i','<br /><b>Code</b><br /><table width="100%" border="1" cellspacing="0" cellpadding="10" class="code"><tr><td>\\1</td></tr></table><br />',$content);

  // Quotes!
  global $language;
  while (preg_match('/\[quote\](.+?)\[\/quote\]/i',$content))
    $content = preg_replace('/\[quote\](.+?)\[\/quote\]/i','<br /><b>'.$language['QUOTE'].':</b><br /><table width="100%" border="1" cellspacing="0" cellpadding="10" class="quote"><tr><td >\\1</td></tr></table><br />',$content);
  while (preg_match('/\[quote=(.+?)\](.+?)\[\/quote\]/i',$content))
    $content = preg_replace('/\[quote=(.+?)\](.+?)\[\/quote\]/i','<br /><b>\\1 '.$language['WROTE'].':</b><br /><table width="100%" border="1" cellspacing="0" cellpadding="10" class="quote"><tr><td>\\2</td></tr></table><br />',$content);
  // .userquoteinfo { font-size:85%; font-weight: bold; font-style: italic; }

  // Size. 1,2,3,4 = 75, 125, 175, 225.  Algo: 25 + 50 * size
  while (preg_match('/\[size=([1-7])\](.+?)\[\/size\]/i',$content))
    $content = preg_replace_callback('/\[size=([1-7])\](.+?)\[\/size\]/i','dosize',$content);

  //Lists
  while (preg_match('/\[list(=(a|1))?\](.+?)\[\/list\]/i',$content))
    $content=preg_replace_callback('/\[list(=(a|1))?\](.+?)\[\/list\]/i','formatlist',$content);

  return $content;
}

function dehtml($content) {
  $content=preg_replace('/&(?!(amp|[#0-9]+|lt|gt|quot|copy|nbsp);)/ix','&amp;',$content);
  $content=str_replace(array('&#160;','&#173;','&#8205;','&#8204;','&#8237;','&#8238;'),'',$content);
  return str_replace(array('<','>','\'','"'),array('&lt;','&gt;','&#39;','&quot;'),$content);
}]]></search>
      <action>"replace"</action>
      <data><![CDATA[/* * * * * * * * * * * * * * * * * * * *
* BB Code parser by James Wilson
* Copyright (c) 2007, James Wilson, drakewilson@gmail.com
* Released under GPL, http://www.gnu.org/copyleft/gpl.html
* Old Site: http://nothingoutoftheordinary.com/scripts/bbcode/
* Example: http://examples.nothingoutoftheordinary.com/bbcode/
* New Site: http://ja.meswilson.com/bbcode/
* extensive modifications by King Cobra, May 25, 2011
*
* the $count feature used in preg_replace, was introduced with php 5.1.0
* if using lower versions of php, then those lines would have to be modified.
*
* Usage:
* In the files you want to use this, place this code:
* include("bbcode.php");
* Assuming this file is in the same directory
* 
* To parse content, call the function bbcode, like
* bbcode($post);
* Or in an echo statement
* echo bbcode($post);
* 
* Simple as that.
*
* Syntax Notes:
* all tags, that use an equal sign (=), can have their contents enclosed in single
* or double quotes.
* Example: [url="http://somesite.com/"] works the same as [url=http://somesite.com/]
*
* All tags can use an optonal single digit after their name. This is so you
* can have control over nested tags, and maybe help you keep track of which
* tag ends where to make editing easier. This feature is required, if you
* want to have unordered lists and ordered lists mixed together, but I
* can't think of any other cases where this feature is required.
* Example: [center4]centered text[/center4].
*
* The foreground color tags can use an optional fg or fg- before the color name.
* Example: [fg-red], [fgred], [red] and [color='red'] are all equal in function.
* The background color tag, must use bg or bg- before the color name when used as tag
* Example: [bg-blue], [bgblue], and [bg-color=blue] are all equal in function.
* 
* Valid codes:
*
* bbcode handling
* [noparse]{text}[/noparse] = {text} is not parsed for bbcodes.
*
* Blocks/sections/areas
* [code]{code text}[/code] = contents are "tt" (teletype) text and are not parsed
* [quote]{text}[/quote] = Enclose {text} in a 'quote' block.
* [quote={author}]{text}[/quote] = Enclose {text} in a 'quote' block, with {author} as the writer.
*
* URL functions
* [img]{imageuri}[/img] = embed image into page
* [img={imageuri}] = embed image into page
* [url={uri}]{text}[/url] = make {text} a link to {uri}
* [url]{uri}[/url] = make {uri} a linl
* http://site -> link = translate bare URL (not in a url tag) into a link
* [email]{emailaddress}[/email]
*
* Text formatting and layout
* [none]{text}[/none] = normal text (cancels existing text processing, normally used within another block)
* [b]{text}[/b] = bold text
* [strong]{text}[/strong] = strong text - usually bold, but can be set with style sheets
* [i]{text}[/i] = italics text
* [em]{text}[/em] = Emphasised text - usually italics, but can be set with style sheets
* [u]{text}[/u] = underline text
* [underline]{text}[/underline] = underline text
* [overline]{text}[/overline] = overline text
* [s]{text}[/s] = strike through text
* [strike]{text}[/strike] = strike through text
* [line-through]{text}[/line-through] = line through text (same as [strike] and [s])
* [sub]{text}[/sub] = Subscript text
* [sup]{text}[/sup] = Superscript text
* [tt]{text}[/tt] = teletype text
*
* Text Size
* [big]{text}[/big] = enclose {text} in html <big> tags. This is different from below.
* [size={#}]{text}[/size] = set text size, where # is a digit from 1 to 8, for 50% to 400% size.
* [size={xx-small|x-small|small|normal|large|x-large|xx-large|smaller|larger}]{text}[/size] = Change {text} to given size. "larger" and "smaller" are relative.
* [xx-small]{text}[/xx-small] = xx-small text
* [x-small]{text}[/x-small] = x-small text
* [small]{text}[/small] = small text
* [normal]{text}[/normal] = normal text
* [large]{text}[/large] = large text
* [x-large]{text}[/x-large] = x-large text
* [xx-large]{text}[/xx-large] = xx-large text
* [smaller]{text}[/smaller] = smaller text
* [larger]{text}[/larger] = larger text
*
* Text alignment
* [left]{text}[/left] = left justified text
* [right]{text}[/right] = right justified text
* [center]{text}[/center] = center justified text
* [justify]{text}[/justify] = right and left justified text
* [pre]{text}[/pre] = pre-formatted text
*
* Colored text handling - 'color' can also be spelled 'colour', and the dash is optional (fgcolor==fg-color)
* [color={######}]{text}[/color] = set text color, where {######} is a 6 digit hex color code
* [color={color}]{text}[/color] = set text color, where {color} is any word between 3 and 25 characters long
*   black, silver, gray, white, maroon, red, purple, fuchsia, green, lime, olive, yellow, navy, blue, teal, aqua.
* [{color}]{text}[/{color}] = set color where {color} is one of the 16 colors defined by w3c
* [fg-{color}]{text}[/fg{color}] = set text color, where {color} is one of the 16 supported w3c colors.
* [bg-color={######}]{text}[/color] = set background color, where {######} is a 6 digit hex color code
* [bg-{color}]{text}[/bg{color}] = set background color, where {color} is one of the 16 supported w3c colors.
*
* Ordered and unordered list
* [list][*]{1}[*]{2}[*]{3}...[/list] = unordered list, using filled in circle bullets
* [list=circle][*]{1}[*]{2}[*]{3}...[/list] = unordered list, using hollow circle bullets
* [list=disc][*]{1}[*]{2}[*]{3}...[/list] = unordered list, using filled in circle bullets
* [list=square][*]{1}[*]{2}[*]{3}...[/list] = unordered list, using filled in square bullets
* [list=1][*]{1}[*]{2}[*]{3}...[/list] = ordered list, using normal numbers
* [list=a][*]{1}[*]{2}[*]{3}...[/list] = Ordered list, using lower case letters
* [list=A][*]{1}[*]{2}[*]{3}...[/list] = Ordered list, using upper case letters
* [list=i][*]{1}[*]{2}[*]{3}...[/list] = Ordered list, using lower case roman numbers
* [list=I][*]{1}[*]{2}[*]{3}...[/list] = Ordered list, using upper case roman numbers
*
* Also included, function dehtml which allows nonparsed content to be outputted out to page safely
* Just call:
* dehtml($post)
* Used for things like textareas:
* echo "<textarea>".dehtml($post)."</textarea>";
* * * * * * * * * * * * * * * * * * * */
$img_count=0;
// 3 functions for the bbcode. Have to be declared outside the function to be able to call bbcode more than once.
function dosize($matches) {
  return '<span style="font-size: '.(50*$matches[3]).'%">'.$matches[4].'</span>';
}

function noparsed($matches) { // any character that is parsed, must be here
  static $replace=array(
    '://' => '&#58;&#47;&#47;',
    '('   => '&#40;',
    ')'   => '&#41;',
    '-'   => '&#45;',
    '/'   => '&#47;',
    ':'   => '&#58;',
    '['   => '&#91;',
    ']'   => '&#93;',
    '_'   => '&#95;',); 
  return str_replace( array_keys($replace), array_values($replace) ,$matches[2]);
}

function formatlist($matches) {
  if ($matches[3]=='') {
    $content.='<ul>';
    $end='</ul>';
  } elseif(strtolower($matches[3])=="a" || strtolower($matches[3])=="i") {
    $content.="<ol type=\"{$matches[3]}\">";
    $end='</ol>';
  } else {
    $content.="<ul type=\"{$matches[3]}\">";
    $end='</ul>';
  }

  return $content.$matches[4].$end;
}

function parseimage($matches) {
  global $img_count;

  $img_count++;
  return "<div id=\"img{$img_count}\" style=\"font-size:'1'; display:inline;\"><img name=\"img{$img_count}\" onload='resize(this);' src='$matches[3]&#58;&#47;&#47;$matches[4]' border='0' alt='' /></div>";
}

function bbcode($content) {
  global $language;
  // Fix & to be &amp; unless it's already &amp; or a special character like  &#9600;  or some regualr ones like <,>,",(c), . More can be found here: http://www.utexas.edu/learn/html/spchar.html  But they can use the decimal verisons if the want those
  $content=preg_replace('/&(?!(amp|[#0-9]+|lt|gt|quot|copy|nbsp);)/ix','&amp;',$content);

  // But some special chars are bad, at least according to vB, so strip them. Most are just blank characters used to bypass filters, except for &#8238; which is just awesome!
  $content=str_replace(array('&#160;','&#173;','&#8205;','&#8204;','&#8237;','&#8238;'),'',$content);

  // Change new lines to <br />. nl2br function probably would work also. It's probably the same as this though. And gets rid of htmlchars. htmlentities screws up the &amp; stuff.
  $content=str_ireplace(array("\r\n","\r","\n"), '<br />',$content);

  do{ // No parse. Just replace anything that is parsed, into their HTML equivalents
    $content=preg_replace_callback('/\[(noparse(?:\d|))\](.+?)\[\/\1\]/i','noparsed',$content, -1, $count);
  }while($count);

  do{ // code tags must be parsed first, because their contents are not parsed.
    $content=preg_replace('/\[(code(?:\d|))\](.+?)\[\/\1\]/i','<br /><b>Code</b><br /><table width="100%" border="1" cellspacing="0" cellpadding="10" class="code"><tr><td>[tt][noparse9]$2[/noparse9][/tt]</td></tr></table><br />',$content, -1, $count);
  }while($count);
          //[align=(center|left|right|justify)]text[/align]
    $content = preg_replace("/\[align=([a-zA-Z]+)\](.+?)\[\/align\]/is","<div style=\"text-align:\\1\">\\2</div>", $content);

// Video tag [video=url]
// YouTube Vids
$content = preg_replace("/\[video=[^\s'\"<>]*youtube.com.*v=([^\s'\"<>]+)\]/ims", "<object width=\"500\" height=\"410\"><param name=\"movie\" value=\"http://www.youtube.com/v/\\1\"></param><embed src=\"http://www.youtube.com/v/\\1\" type=\"application/x-shockwave-flash\" width=\"500\" height=\"410\"></embed></object>", $content);
// Google Vids
$content = preg_replace("/\[video=[^\s'\"<>]*video.google.com.*docid=(-?[0-9]+).*\]/ims", "<embed style=\"width:500px; height:410px;\" id=\"VideoPlayback\" align=\"middle\" type=\"application/x-shockwave-flash\" src=\"http://video.google.com/googleplayer.swf?docId=\\1\" allowScriptAccess=\"sameDomain\" quality=\"best\" bgcolor=\"#ffffff\" scale=\"noScale\" wmode=\"window\" salign=\"TL\"  FlashVars=\"playerMode=embedded\"> </embed>", $content);

     //[video=http://somesite.com/test.swf]
        $content = preg_replace("/\[video=((www.|http:\/\/|https:\/\/)[^\s]+(\.swf))\]/i",
        "<param name=movie value=\\1/><embed width=470 height=350 src=\\1></embed>", $content);

  do{ // code blocks insert the noparse tag. Can't parse the code block first, or you can't use noparse on it.
    $content=preg_replace_callback('/\[(noparse(?:\d|))\](.+?)\[\/\1\]/i','noparsed',$content, -1, $count);
  }while($count);

  // Quotes!
  do{
    $content = preg_replace('/\[(quote(?:\d|))\](.+?)\[\/\1\]/i','<br /><b>'.$language['QUOTE'].':</b><br /><table width="100%" border="1" cellspacing="0" cellpadding="10" class="quote"><tr><td >$2</td></tr></table><br />',$content, -1, $count);
  }while($count);
  do{
    $content = preg_replace('/\[(quote(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)(.+?)\2\](.+?)\[\/\1\]/i','<br /><b>$3 '.$language['WROTE'].':</b><br /><table width="100%" border="1" cellspacing="0" cellpadding="10" class="quote"><tr><td>$4</td></tr></table><br />',$content, -1, $count);
  }while($count);
  // .userquoteinfo { font-size:85%; font-weight: bold; font-style: italic; }

  // Images. They have to have http://. src attributes are XSSable in IE 6.0, Netscape, and Opera. http://ha.ckers.org/xss.html. Even though it's hard to do without () or \, best not to mess around with it.
  $content=preg_replace_callback('/\[(img(?:\d|))\](&quot;|&#(?:0|)39;|"|\'|)(http|https|ftp|ftps):\/\/([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\2\[\/\1\]/i','parseimage',$content);
  $content=preg_replace_callback('/\[(img(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)(http|https|ftp|ftps):\/\/([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\2\]/i','parseimage',$content);

  // [url=uri]text[/url]
  $content=preg_replace('/\[(url(?:\d|))\=(&quot;|&#(?:0|)39;|"|\'|)(http|https|ftp|ftps|ed2k|irc):\/\/([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\2\](.+?)\[\/\1\]/i', '<a href="$3&#58;&#47;&#47;$4" target="_blank">$5</a>', $content);
  // For people too lazy to put http:// on the uri. /Shouldn't/ be XSSable
  $content=preg_replace('/\[(url(?:\d|))\=(&quot;|&#(?:0|)39;|"|\'|)([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\2\](.+?)\[\/\1\]/i', '<a href="http&#58;&#47;&#47;$3" target="_blank">$4</a>', $content);

  // [url]uri[/url]
  $content=preg_replace('/\[(url(?:\d|))\](http|https|ftp|ftps|ed2k|irc):\/\/([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\[\/\1\]/i','<a href="$2&#58;&#47;&#47;$3" target="_blank">$2&#58;&#47;&#47;$3</a>',$content);
  // lazy http:// people...
  $content=preg_replace('/\[(url(?:\d|))\]([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)\[\/\1\]/i','<a href="http&#58;&#47;&#47;$2" target="_blank">http&#58;&#47;&#47;$2</a>',$content);

  // http://www.google.com -> <a href="http://www.google.com">http://www.google.com</a>
  $content=preg_replace('/(?<![href|src]=[&quot;|&#(?:0|)39;|"|\'])(http|https|ftp|ftps|ed2k|irc):\/\/([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]*)/i','<a href="$1://$2" target="_blank">$1://$2</a>',$content);

  // Email. Do people even use this? Yes, so they can get revenge on someone by posting their email address.
  $content=preg_replace('/\[(email(?:\d|))\]([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]+)@([a-z0-9\/\-\+\?\&\.\=\_\~\#\'\%\;]+)\[\/\1\]/i','<a href="mailto:$2@$3">$2@$3</a>',$content);

//[Spoiler]TEXT[/Spoiler]
    $content=preg_replace("/\[Spoiler\]((\s|.)+?)\[\/Spoiler\]/", "<div style=\"padding: 3px;  border: 1px solid #d8d8d8; font-size: 1em;\"><div style=\"text-transform: uppercase; border-bottom: 1px solid #CCCCCC; margin-bottom: 3px; font-size: 0.8em; font-weight: bold; display: block;\"><span onClick=\"if (this.parentNode.parentNode.getElementsByTagName('div')[1].getElementsByTagName('div')[0].style.display != '') { this.parentNode.parentNode.getElementsByTagName('div')[1].getElementsByTagName('div')[0].style.display = ''; this.innerHTML = '<b>Spoiler: </b><a href=\'#\' onClick=\'return false;\'>hide</a>'; } else { this.parentNode.parentNode.getElementsByTagName('div')[1].getElementsByTagName('div')[0].style.display = 'none'; this.innerHTML = '<b>Spoiler: </b><a href=\'#\' onClick=\'return false;\'>show</a>'; }\" /><b>Spoiler:</b><a href=\"#\" onClick=\"return false;\">show</a></span></div><div class=\"quotecontent\"><div style=\"display: none;\">\\1</div></div></div>",$content);

// [marquee]Marquee[/marquee]
    $content=preg_replace("/\[scroll=([a-zA-Z ,]+)\]((\s|.)+?)\[\/scroll\]/i","<marquee class=\"tableb\" direction=\"\\1\" scrollamount=\"3\" scrolldelay=\"2\" onmouseover=\"this.stop();\" onmouseout=\"this.start();\">\\2</marquee>",$content);

  do{ // bold, big, italics, strike through, tt, underline, em, strong, subscript, superscript, overline, pre
    $content=preg_replace('/\[((b|big|i|s|strike|tt|u|em|strong|sub|sup|pre)(?:\d|))\](.+?)\[\/\1\]/i','<$2>$3</$2>',$content, -1, $count);
  }while($count);
  do{
    $content=preg_replace('/\[((overline|underline|line-through|none)(?:\d|))\](.+?)\[\/\1\]/i','<font style="text-decoration: $2;">$3</font>',$content, -1, $count);
  }while($count);

  do{ // [left], [center], [right] and [justify] tags
    $content=preg_replace('/\[((left|right|center|justify)(?:\d|))\](.+?)\[\/\1\]/i', '<div align="$2">$3</div>',$content, -1, $count);
  }while($count);

  do{ // the color is the tag itself, like [fgyellow]yellow text[/fgyellow], or [fg-blue]blue text[/fg-blue]
  // If the color is the tag itself, like [green], then it must ALWAYS be a whitelist of accepted colors.
    $content=preg_replace('/\[((?:fg|fg-|)(black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua)(?:\d|))\](.+?)\[\/\1\]/i','<font color="$2">$3</font>',$content, -1, $count);
  }while($count);
  do{ // font color. Word type, like [color=red]RED[/color] not limited in name, for backwards compatability.
    $content=preg_replace('/\[((?:fg|fg-|)colo(?:u|)r(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)([a-z]{3,25})\2\](.+?)\[\/\1\]/i','<font color="$3">$4</font>',$content, -1, $count);
  }while($count);
  do{ // Color specified in RGB triplet, like [color=696969]GREY[/color]
    $content=preg_replace('/\[((?:fg|fg-|)colo(?:u|)r(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)([\dA-F]{3,6})\2\](.+?)\[\/\1\]/i','<span style="color: #$3;">$4</span>',$content, -1, $count);
  }while($count);

  // background colors
  do{ // but since the bgcolor tag is new, I will limit the colors, for maximum web compatability. Of course you can set any color you like with the RGB background tag. Maybe remove color whitelist, dependong on user feedback.
    $content=preg_replace('/\[((?:bg|bg-)colo(?:u|)r(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)(black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua)\2\](.+?)\[\/\1\]/i','<span style="background: $3;">$4</span>',$content, -1, $count);
  }while($count);
  do{ // This background tag uses the following syntax, for a red background: [bgred] or [bg-red] 
    $content=preg_replace('/\[((?:bg|bg-)(black|silver|gray|white|maroon|red|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua)(?:\d|))\](.+?)\[\/\1\]/i','<span style="background: $2;">$3</span>',$content, -1, $count);
  }while($count);
  do{ // background color specified in RGB triplet, like [bg-color=ff0000]red background[/bg-color]
    $content=preg_replace('/\[((?:bg|bg-)colo(?:u|)r(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)([0-9A-F]{3,6})\2\](.+?)\[\/\1\]/i','<span style="background: #$3;">$4</span>',$content, -1, $count);
  }while($count);


  do{ // Size. 1,2,3,4...8 = 50%, 100%, 150%, 200%...400%  Algo: 50 * size
    $content = preg_replace_callback('/\[(size(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)([1-8])\2\](.+?)\[\/\1\]/i','dosize',$content, -1, $count);
  }while($count);
  do{ // [size=xx-small] style tag
    $content = preg_replace('/\[(size(?:\d|))=(&quot;|&#(?:0|)39;|"|\'|)((xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller)(?:\d|))\2\](.+?)\[\/\1\]/i','<font style="font-size: $4;">$5</font>',$content, -1, $count);
  }while($count);
  do{ // [xx-large] style tag
    $content = preg_replace('/\[((xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller)(?:\d|))\](.+?)\[\/\1\]/i','<font style="font-size: $2;">$3</font>',$content, -1, $count);
  }while($count);

  //Lists
  do{ // [list] or [list=a] or [list=circle] etc
    $content=preg_replace_callback('/\[(list(?:\d|))(?:=(&quot;|&#(?:0|)39;|"|\'|)(a|i|1|disc|square|circle)\2|)\](.+?)\[\/\1\]/i','formatlist',$content, -1, $count);
  }while($count);

  // just some little things I thought might be nice to have.
  static $replace=array(
    "  "   => " &nbsp;",
    "[*]"  => "<li>",
    "[hr]" => "<hr>",
    "[br]" => "<br />",
    "(c)"  => "&copy;",
    "[c]"  => "&copy;",
    "(p)"  => "&#8471;",
    "[p]"  => "&#8471;",
    "(r)"  => "&reg;",
    "[r]"  => "&reg;",
    "(tm)" => "&trade;",
    "[tm]" => "&trade;",
    "1/2"  => "&frac12;",
    "1/3"  => "&#8531;",
    "2/3"  => "&#8532;",
    "1/4"  => "&frac14",
    "3/4"  => "&frac34;",
    "1/5"  => "&#8533;",
    "2/5"  => "&#8534;",
    "3/5"  => "&#8535;",
    "4/5"  => "&#8536;",
    "1/6"  => "&#8537;",
    "5/6"  => "&#8538;",
    "1/8"  => "&#8539;",
    "3/8"  => "&#8540;",
    "5/8"  => "&#8541;",
    "7/8"  => "&#8542;"
  );
  $content=str_ireplace(array_keys($replace), array_values($replace) ,$content);



  return $content;
}

function dehtml($content) {
  $content=preg_replace('/&(?!(amp|[#0-9]+|lt|gt|quot|copy|nbsp);)/ix','&amp;',$content);
  $content=str_replace(array('&#160;','&#173;','&#8205;','&#8204;','&#8237;','&#8238;'),'',$content);
  return str_replace(array('<','>','\'','"'),array('&lt;','&gt;','&#39;','&quot;'),$content);
}]]></data>
    </operation>
  </file>

  <file>
    <name>"$DEFAULT_ROOT/include/functions.php"</name>
    <operation>
      <search><![CDATA[  if ($num == 1)
    return '#FFFF00';
  return '#FFFF00';
]]></search>
      <action>"replace"</action>
      <data><![CDATA[  return '#FFFF00';
]]></data>
    </operation>
  </file>
  <file>
    <name>"$DEFAULT_ROOT/include/functions.php"</name>
    <operation>
      <search><![CDATA[function format_comment($text, $strip_html = true) {
]]></search>
      <action>"replace"</action>
      <data><![CDATA[function format_comment($text, $strip_html = true, $smilies = true ) {
]]></data>
    </operation>
  </file>
  <file>
    <name>"$DEFAULT_ROOT/include/functions.php"</name>
    <operation>
      <search><![CDATA[  // [*]
  $text = preg_replace('/\[\*\]/', '<li>', $text);

  // Maintain spacing
  $text = str_replace('  ', ' &nbsp;', $text);

  $smilies=array_merge($smilies, $privatesmilies);
  reset($smilies);
  while (list($code, $url) = each($smilies))
    $text = str_replace($code, '<img border="0" src="'.$BASEURL.'/images/smilies/'.$url.'" alt="'.$url.'" />', $text);
]]></search>
      <action>"replace"</action>
      <data><![CDATA[  if($smilies) {
    $smilies=array_merge($smilies, $privatesmilies);
    reset($smilies);
    while (list($code, $url) = each($smilies))
      $text = str_replace($code, '<img border="0" src="'.$BASEURL.'/images/smilies/'.$url.'" alt="'.$url.'" />', $text);
  }
]]></data>
    </operation>
  </file>
  <file>
    <name>"$DEFAULT_STYLE_PATH/txtbbcode.tpl"</name>
    <operation>
      <search><![CDATA[  <table cellpadding="0" cellspacing="0">
    <tr>
      <td>
      <table cellpadding="0" cellspacing="1" align="left">
      <tr><td align="left"><input class="btn" style="font-weight: bold;" type="button" name="bold" value="B " onclick="javascript: BBTag('[b]','[/b]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input class="btn" style="font-style: italic;" type="button" name="italic" value="i " onclick="javascript: BBTag('[i]','[/i]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input class="btn" style="text-decoration: underline;" type="button" name="underline" value="U " onclick="javascript: BBTag('[u]','[/u]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="li" value="List " onclick="javascript: BBTag('[*]','',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="code" value="Code" onclick="javascript: BBTag('[code]','[/code]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="quote" value="Quote" onclick="javascript: BBTag('[quote]','[/quote]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="url" value="Url" onclick="javascript: BBTag('[url]','[/url]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="img" value="Img" onclick="javascript: BBTag('[img]','[/img]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        </tr></table>
        <table width="50%" cellpadding="0" cellspacing="1" align="left">
                <tr colspan="2">
                <td align="left"><select onchange="BBTag('[size=' + this.options[this.selectedIndex].value.toLowerCase() + ']','[/size]', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#D2D0D0;" name="fontchange">
              <option value="" selected="selected">Font Size</option>
              <option value="1">xx-small</option>
              <option value="2">x-small</option>
              <option value="3">small</option>
              <option value="4">medium</option>
              <option value="5">large</option>
              <option value="6">x-large</option>
              <option value="7">xx-large</option>
              </select></td>
                 <td align="left" style="text-align:left;"><select onchange="BBTag('[color=' + this.options[this.selectedIndex].value.toLowerCase() + ']','[/color]', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#D2D0D0;" name="fontchange">
              <option value="" selected="selected">Change Color</option>
              <option value="Black" style="color:black">Black</option>
              <option value="Red" style="color:red">Red</option>
              <option value="Yellow" style="color:Yellow">Yellow</option>
              <option value="Pink" style="color:Pink">Pink</option>
              <option value="Green" style="color:Green">Green</option>
              <option value="Orange" style="color:Orange">Orange</option>
              <option value="Purple" style="color:Purple">Purple</option>
              <option value="Blue" style="color:Blue">Blue</option>
              <option value="Beige" style="color:Beige">Beige</option>
              <option value="Brown" style="color:Brown">Brown</option>
              <option value="Teal" style="color:Teal">Teal</option>
              <option value="Navy" style="color:Navy">Navy</option>
              <option value="Maroon" style="color:Maroon">Maroon</option>
              <option value="LimeGreen" style="color:LimeGreen">Lime Green</option>
              </select></td>
      </tr>
      </table>
      </td>
    </tr>
    <tr>
      <td>
      <textarea name="<tag:object_name />" rows="10" style="width:98%" onselect="storeCaret(this);" onclick="storeCaret(this);" onkeyup="storeCaret(this);" onchange="storeCaret(this);"><tag:content /></textarea>
      </td>
    </tr>
		<tr>
      <td><center>
      <tag:smilies_table /></center>
      <center>
      <a href="javascript: PopMoreSmiles('<tag:form_name />','<tag:object_name />')"><tag:language.MORE_SMILES /></a></center>
      </td>
    </tr>
  </table>]]></search>
      <action>"replace"</action>
      <data><![CDATA[  <table width="100%" cellpadding="5" cellspacing="5">
    <tr>
      <td>
      <table cellpadding="5">
      <tr>
        <td align="left"><input type="button" class="btn" name="code" value="Code" onclick="javascript: BBTag('[code]','[/code]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="quote" value="Quote" onclick="javascript: BBTag('[quote]','[/quote]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="url" value="Url" onclick="javascript: BBTag('[url]','[/url]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="img" value="Img" onclick="javascript: BBTag('[img]','[/img]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left" style="height:25px;"><input type="button" class="btn" name="noparse" value="NoParse" onclick="javascript: BBTag('[noparse]','[/noparse]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left" style="height:25px;"><input type="button" class="btn" name="br" value="br" onclick="javascript: BBTag('[br]','',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
     	  <td align="left" style="height:25px;"><input type="button" class="btn" name="li" value="*" onclick="javascript: BBTag('[*]','',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
     	  <td align="left" style="height:25px;"><input type="button" class="btn" name="hr" value="hr" onclick="javascript: BBTag('[hr]','',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="email" value="Email" onclick="javascript: BBTag('[email]','[/email]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        <td align="left"><input type="button" class="btn" name="spoiler" value="Spoiler" onclick="javascript: BBTag('[Spoiler]','[/Spoiler]',document.forms.<tag:form_name />.<tag:object_name />)" /></td>
        	  	  
          </tr>
</table>
	      
        <table cellpadding="5">
                <tr>
                <td><select onchange="BBTag('[size=\'' + this.options[this.selectedIndex].value.toLowerCase() + '\']','[/size]', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="fontchange">
              <option value="" selected="selected">Font Size</option>
              <option value="smaller">smaller</option>
              <option value="xx-small">xx-small</option>
              <option value="x-small">x-small</option>
              <option value="small">small</option>
              <option value="medium">medium</option>
              <option value="large">large</option>
              <option value="x-large">x-large</option>
              <option value="xx-large">xx-large</option>
              <option value="larger">larger</option>
              </select>
                 <td style="text-align:left;"><select onchange="BBTag('[color=\'' + this.options[this.selectedIndex].value.toLowerCase() + '\']','[/color]', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="fontchange">
              <option value="" selected="selected">Text Color</option>
              <option value="Black" style="color:black">Black</option>
              <option value="Blue" style="color:Blue">Blue</option>
              <option value="Fuchsia" style="color:Fuchsia">Fuchsia</option>
              <option value="Gray" style="color:Gray">Gray</option>
              <option value="Green" style="color:Green">Green</option>
              <option value="Maroon" style="color:Maroon">Maroon</option>
              <option value="Navy" style="color:Navy">Navy</option>
              <option value="Olive" style="color:Olive">Olive</option>
              <option value="Purple" style="color:Purple">Purple</option>
              <option value="Red" style="color:red">Red</option>
              <option value="Aqua" style="color:Aqua; background:black">Aqua</option>
              <option value="Lime" style="color:Lime; background:black">Lime</option>
              <option value="Silver" style="color:Silver; background:black">Silver</option>
              <option value="Teal" style="color:Teal; background:black">Teal</option>
              <option value="White" style="color:White; background:black">White</option>
              <option value="Yellow" style="color:Yellow; background:black">Yellow</option>
              </select>
                 <td style="text-align:left;"><select onchange="BBTag('[bg-color=\'' + this.options[this.selectedIndex].value.toLowerCase() + '\']','[/bg-color]', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="fontchange">
              <option value="" selected="selected">Background Color</option>
              <option value="Black" style="color:white; background:Black">Black</option>
              <option value="Blue" style="color:white; background:Blue">Blue</option>
              <option value="Fuchsia" style="color:white; background:Fuchsia">Fuchsia</option>
              <option value="Gray" style="color:white; background:Gray">Gray</option>
              <option value="Green" style="color:white; background:Green">Green</option>
              <option value="Maroon" style="color:white; background:Maroon">Maroon</option>
              <option value="Navy" style="color:white; background:Navy">Navy</option>
              <option value="Olive" style="color:white; background:Olive">Olive</option>
              <option value="Purple" style="color:white; background:Purple">Purple</option>
              <option value="Red" style="color:white; background:Red">Red</option>
              <option value="Aqua" style="color:black; background:Aqua">Aqua</option>
              <option value="Lime" style="color:black; background:Lime">Lime</option>
              <option value="Silver" style="color:black; background:Silver">Silver</option>
              <option value="Teal" style="color:black; background:Teal">Teal</option>
              <option value="White" style="color:black; background:White">White</option>
              <option value="Yellow" style="color:black; background:Yellow">Yellow</option>
              </select>
              </tr>
	      </table>
	      
        <table cellpadding="5">	      
                <td align="left"><select onchange="BBTag('[' + this.options[this.selectedIndex].value.toLowerCase() + ']','[/' + this.options[this.selectedIndex].value.toLowerCase() + ']', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="fontchange">
              <option value="" selected="selected">Text Formatting</option>
              <option value="none">no formatting</option>
              <option value="b" style="font-weight: bold;">bold text</option>
              <option value="i" style="font-style: italic;">italic text</option>
              <option value="underline" style="text-decoration: underline;">underline</option>
              <option value="strike" style="text-decoration: line-through;">strike-through</option>
              <option value="overline" style="text-decoration: overline;">overline</option>
              <option value="tt">teletype text</option>
              <option value="sub">subscript</option>
              <option value="sup">superscript</option>
              </select></td>
                <td align="left"><select onchange="BBTag('[' + this.options[this.selectedIndex].value.toLowerCase() + ']','[/' + this.options[this.selectedIndex].value.toLowerCase() + ']', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="fontchange">
              <option value="" selected="selected">Text Alignment</option>
              <option value="left">left</option>
              <option value="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right</option>
              <option value="center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center</option>
              <option value="justified">j u s t i f i e d</option>
              <option value="pre">preformatted</option>
              </select></td>
                <td align="left"><select onchange="BBTag('[' + this.options[this.selectedIndex].value + ']', '[/scroll]', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="scroll">
              <option value="" selected="selected">Scrolling Text</option>
              <option value="scroll=left">Scroll Left</option>
              <option value="scroll=right">Scroll Right</option>
              <option value="scroll=up">Scroll Up</option>
              <option value="scroll=down">Scroll Down</option>
              </select></td>              
                <td align="left"><select onchange="BBTag('[' + this.options[this.selectedIndex].value + ']\n[*]\n[*]\n[/list]', '', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="fontchange">
              <option value="" selected="selected">Lists</option>
              <option value="list">unordered list</option>
              <option value="list=circle">circle list</option>
              <option value="list=square">Square List</option>
              <option value="list=1">Numbered List</option>
              <option value="list=A">UPPERCASE LETTERS</option>
              <option value="list=a">lowercase letters</option>
              <option value="list=I">UPPERCASE ROMAN</option>
              <option value="list=i">lowercase Roman</option>

              </select></td>	  	  
          </tr>
</table>
<table cellpadding="5">
<td><select onchange="BBTag('[' + this.options[this.selectedIndex].value + ']', '[/align]', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="videoalignment">
              <option value="" selected="selected">Video Alignment</option>
              <option value="align=left">Left</option>
              <option value="align=center">Center</option>
              <option value="align=right">Right</option>
              </select></td>
<td><select onchange="BBTag('[' + this.options[this.selectedIndex].value + ']', '', document.forms.<tag:form_name />.<tag:object_name />); this.selectedIndex = 0;" size="1" style="background-color:#DEDEDE;" name="videotype">
              <option value="" selected="selected">Video Types</option>
              <option value="video=">YouTube Videos</option>
              <option value="video=">Google Videos</option>
              <option value="video=">Flash Videos</option>
              </select></td>
              </tr>
	      </table>
    <tr>
      <td>
      <textarea name="<tag:object_name />" rows="15" style="width:96%" onselect="storeCaret(this);" onclick="storeCaret(this);" onkeyup="storeCaret(this);" onchange="storeCaret(this);"><tag:content /></textarea>
      </td>
    </tr>
		<tr>
      <td><center>
      <tag:smilies_table /></center>
      <center>
      <a href="javascript: PopMoreSmiles('<tag:form_name />','<tag:object_name />')"><tag:language.MORE_SMILES /></a></center>
      </td>
    </tr>
  </table>]]></data>
    </operation>
  </file>


</hack>
